{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assignment3_03.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Importing Reusable Librabries"
      ],
      "metadata": {
        "id": "qgEbb4fLzDQg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "sDMtN4_a_wGw"
      },
      "outputs": [],
      "source": [
        "import os \n",
        "import requests\n",
        "import zipfile\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        " "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "DATA RETRIEVAL\n",
        "\n",
        "We utilize python's built-in libraries, that is, request and zipfile to fetch and extract data from World Bank API."
      ],
      "metadata": {
        "id": "ftYTQQoDa3H0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# World Bank Data API url\n",
        "data_url = \"https://api.worldbank.org/v2/en/topic/19?downloadformat=csv\"\n",
        "# data file location\n",
        "parent_path = os.getcwd()\n",
        "# The data zipfile location\n",
        "zip_path = f\"{parent_path}/climate_data.tar.gz\"\n",
        "\n",
        "def get_data(url):\n",
        "  if not os.path.exists(zip_path):\n",
        "    data = requests.get(url)\n",
        "    with open(zip_path, 'wb') as zp:\n",
        "      zp.write(data.content)\n",
        "\n",
        "def extract_data(f_path):\n",
        "  if not os.path.exists(\"API_19_DS2_en_csv_v2_4151283.csv\"):\n",
        "    with zipfile.ZipFile(f_path, \"r\") as zp:\n",
        "      zp.extractall(parent_path)\n",
        "# getting the data\n",
        "get_data(data_url)\n",
        "extract_data(zip_path)"
      ],
      "metadata": {
        "id": "LhwhMd1uFUAd"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "DATA CLEANING\n",
        "\n",
        "We utilize pandas and numpy library to clean and transform the extracted csv file"
      ],
      "metadata": {
        "id": "esBrRGsdbR-A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "wb_dataframe = pd.read_csv(\"API_19_DS2_en_csv_v2_4151283.csv\", skiprows=4).drop(['Unnamed: 66'], axis=1)"
      ],
      "metadata": {
        "id": "sTmjmAkIGwVG"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# a method for normalizing data\n",
        "def normalize_values(data):\n",
        "  max = np.max(data)\n",
        "  normalized = data/max\n",
        "  return  normalized"
      ],
      "metadata": {
        "id": "craQKWTnQbFb"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "ANALYSIS OF INDICATORS"
      ],
      "metadata": {
        "id": "-U9rbbyfCGWH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "i. Total Greenhouse Gas Emission\n",
        "\n",
        "\n",
        "The percentage change of total greenhouse gas emission from 1990"
      ],
      "metadata": {
        "id": "BDr7cIpBZYtc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gas_dataframe = wb_dataframe[wb_dataframe['Indicator Code'] == 'EN.ATM.CO2E.PP.GD'].drop(['Indicator Code', 'Indicator Name'], axis=1)\n",
        "gas_filtered = gas_dataframe.fillna(0)\n",
        "gas_filtered.replace([np.inf, -np.inf], 0, inplace=True)\n",
        "gas_2010 = gas_filtered['2010'].values\n",
        "gas_2019 = gas_filtered['2019'].values\n",
        "gas_filtered.head()"
      ],
      "metadata": {
        "id": "uOp1NQyZZcV6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "outputId": "d4e4e200-e9c2-4860-8da8-ade6247fb7f3"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    Country Name Country Code  1960  1961  1962  1963  1964  \\\n",
              "40                         Aruba          ABW   0.0   0.0   0.0   0.0   0.0   \n",
              "116  Africa Eastern and Southern          AFE   0.0   0.0   0.0   0.0   0.0   \n",
              "192                  Afghanistan          AFG   0.0   0.0   0.0   0.0   0.0   \n",
              "268   Africa Western and Central          AFW   0.0   0.0   0.0   0.0   0.0   \n",
              "344                       Angola          AGO   0.0   0.0   0.0   0.0   0.0   \n",
              "\n",
              "     1965  1966  1967  ...      2012      2013      2014      2015      2016  \\\n",
              "40    0.0   0.0   0.0  ...  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
              "116   0.0   0.0   0.0  ...  0.311551  0.302708  0.293408  0.275935  0.264321   \n",
              "192   0.0   0.0   0.0  ...  0.175139  0.130843  0.113093  0.111232  0.105424   \n",
              "268   0.0   0.0   0.0  ...  0.130123  0.125749  0.120623  0.116140  0.116235   \n",
              "344   0.0   0.0   0.0  ...  0.162526  0.164210  0.157149  0.171844  0.172837   \n",
              "\n",
              "         2017      2018  2019  2020  2021  \n",
              "40   0.000000  0.000000   0.0   0.0   0.0  \n",
              "116  0.256016  0.243090   0.0   0.0   0.0  \n",
              "192  0.098779  0.096105   0.0   0.0   0.0  \n",
              "268  0.115763  0.121826   0.0   0.0   0.0  \n",
              "344  0.141476  0.124984   0.0   0.0   0.0  \n",
              "\n",
              "[5 rows x 64 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4aa5ed7-7062-425c-aaf6-dc4dfec09238\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country Name</th>\n",
              "      <th>Country Code</th>\n",
              "      <th>1960</th>\n",
              "      <th>1961</th>\n",
              "      <th>1962</th>\n",
              "      <th>1963</th>\n",
              "      <th>1964</th>\n",
              "      <th>1965</th>\n",
              "      <th>1966</th>\n",
              "      <th>1967</th>\n",
              "      <th>...</th>\n",
              "      <th>2012</th>\n",
              "      <th>2013</th>\n",
              "      <th>2014</th>\n",
              "      <th>2015</th>\n",
              "      <th>2016</th>\n",
              "      <th>2017</th>\n",
              "      <th>2018</th>\n",
              "      <th>2019</th>\n",
              "      <th>2020</th>\n",
              "      <th>2021</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>Aruba</td>\n",
              "      <td>ABW</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116</th>\n",
              "      <td>Africa Eastern and Southern</td>\n",
              "      <td>AFE</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.311551</td>\n",
              "      <td>0.302708</td>\n",
              "      <td>0.293408</td>\n",
              "      <td>0.275935</td>\n",
              "      <td>0.264321</td>\n",
              "      <td>0.256016</td>\n",
              "      <td>0.243090</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>192</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.175139</td>\n",
              "      <td>0.130843</td>\n",
              "      <td>0.113093</td>\n",
              "      <td>0.111232</td>\n",
              "      <td>0.105424</td>\n",
              "      <td>0.098779</td>\n",
              "      <td>0.096105</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>268</th>\n",
              "      <td>Africa Western and Central</td>\n",
              "      <td>AFW</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.130123</td>\n",
              "      <td>0.125749</td>\n",
              "      <td>0.120623</td>\n",
              "      <td>0.116140</td>\n",
              "      <td>0.116235</td>\n",
              "      <td>0.115763</td>\n",
              "      <td>0.121826</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>Angola</td>\n",
              "      <td>AGO</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.162526</td>\n",
              "      <td>0.164210</td>\n",
              "      <td>0.157149</td>\n",
              "      <td>0.171844</td>\n",
              "      <td>0.172837</td>\n",
              "      <td>0.141476</td>\n",
              "      <td>0.124984</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 64 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4aa5ed7-7062-425c-aaf6-dc4dfec09238')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c4aa5ed7-7062-425c-aaf6-dc4dfec09238 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c4aa5ed7-7062-425c-aaf6-dc4dfec09238');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "FOREST AREA\n",
        "\n",
        "Percentage Change of area under forest in various countries"
      ],
      "metadata": {
        "id": "ZiQ6cTyvDYEF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "forest_dataframe = wb_dataframe[wb_dataframe['Indicator Code'] == 'AG.LND.FRST.ZS'].fillna(0)\n",
        "forest_2010_ds = forest_dataframe['2015'].values\n",
        "forest_2019_ds = forest_dataframe['2019'].values\n",
        "forest_dataframe.head()"
      ],
      "metadata": {
        "id": "3yl2NmoLDl6D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "CLUSTERING ANALYSIS\n",
        "\n",
        "Clustering or cluster analysis is an unsupervised learning problem. It is often used as a data analysis technique for discovering interesting patterns in data such as groups of customers based on their behavior"
      ],
      "metadata": {
        "id": "889ouhjzFu5R"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "i. Agglomerative Clustering\n",
        "\n",
        "Agglomerative clustering is a clustering algorithm which involves merging examples until the desired number of clusters is achieved. It is a type of hierarchical clustering."
      ],
      "metadata": {
        "id": "j_maYjRDlwEm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from matplotlib import pyplot as plt \n",
        "\n",
        "def reshape(groupA, groupB):\n",
        "  xy = np.empty((266, 2))\n",
        "  for index, (i,j) in enumerate(zip(groupA, groupB)):\n",
        "    xy[index, 0] = i\n",
        "    xy[index, 1] = j\n",
        "  return xy\n",
        "\n",
        "# A function for finding Agglomerative Clusters\n",
        "def cluster_Agglomerative(data):\n",
        "  model =  AgglomerativeClustering(n_clusters=10)\n",
        "  data_pred = model.fit_predict(data)\n",
        "  data_pred_unique = np.unique(data_pred)\n",
        "  return data_pred, data_pred_unique\n",
        "\n",
        "# A function for plotting clusters \n",
        "def plot_clusters(clusters,predicted, combined, title, xlabel, ylabel):\n",
        "  for cluster in clusters:\n",
        "    # get row indexes for samples with this cluster\n",
        "    row_ix = np.where(predicted == cluster)\n",
        "    # create scatter of these samples\n",
        "    plt.scatter(combined[row_ix, 0], combined[row_ix, 1])\n",
        "    plt.title(title)\n",
        "    plt.xlabel(xlabel)\n",
        "    plt.ylabel(ylabel)\n",
        "  # show the plot\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "KZ4yCItfk0hU"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gas_merged = reshape(gas_2010, gas_2019)\n",
        "gas_merged_hat = cluster_Agglomerative(gas_merged)[0]\n",
        "gas_merged_clusters = cluster_Agglomerative(gas_merged)[1]\n",
        "plot_clusters(\n",
        "        gas_merged_clusters, \n",
        "        gas_merged_hat, \n",
        "        gas_merged, \n",
        "        \"Agglomerative Clustering of % Gas Emission\", \n",
        "        \"1990 % gas Emission\", \n",
        "        \"2015 % gas Emission\")"
      ],
      "metadata": {
        "id": "xe6bmNpyFBc7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "70c4834c-3505-40d0-b0ff-b1b439769b92"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "forest_merged = reshape(forest_2010_ds, forest_2019_ds)\n",
        "forest_merged_hat = cluster_Agglomerative(forest_merged)[0]\n",
        "forest_merged_clusters = cluster_Agglomerative(forest_merged)[1]\n",
        "plot_clusters(\n",
        "        gas_merged_clusters, \n",
        "        gas_merged_hat, \n",
        "        gas_merged, \n",
        "        \"Agglomerative Clustering of % Forest Area 2010 and 2019\", \n",
        "        \"2010 % Forest Area\", \n",
        "        \"2015 % Forest Area\")"
      ],
      "metadata": {
        "id": "ESN0XOVa4bUe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "16375864-a416-42fe-db44-45eee1e26d19"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "ii. K-means Clustering\n",
        "\n",
        "K-Means Clustering may be the most widely known clustering algorithm and involves assigning examples to clusters in an effort to minimize the variance within each cluster."
      ],
      "metadata": {
        "id": "Xly9xLx9BWZ5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# A method for finding K-Means Clusters\n",
        "def cluster_kmeans(data):\n",
        "  model = KMeans(n_clusters=10)\n",
        "  data_pred = model.fit_predict(data)\n",
        "  data_pred_unique = np.unique(data_pred)\n",
        "  return data_pred, data_pred_unique"
      ],
      "metadata": {
        "id": "jDCCL27WBaIU"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gas_merged_hat_a = cluster_kmeans(gas_merged)[0]\n",
        "gas_merged_clusters_a = cluster_kmeans(gas_merged)[1]\n",
        "plot_clusters(\n",
        "        gas_merged_clusters_a, \n",
        "        gas_merged_hat_a, \n",
        "        gas_merged, \n",
        "        \"K-Means Clustering of % Gas Emission\", \n",
        "        \"1990 % gas Emission\", \n",
        "        \"2015 % gas Emission\")"
      ],
      "metadata": {
        "id": "5pboj1TsNBFI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "e79aabbb-74f7-4dd9-ff19-b041e17efce1"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Part II"
      ],
      "metadata": {
        "id": "qXZ8t40eIiBq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Curve Fitting\n",
        "\n",
        "Curve fitting is the way we model or represent a data spread by assigning a ‘best fit‘ function (curve) along the entire range. Ideally, it will capture the trend in the data and allow us to make predictions of how the data series will behave in the future"
      ],
      "metadata": {
        "id": "z__gfuJpLqkd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.optimize import curve_fit\n",
        "\n",
        "# PREPARING THE TIME SERIES DATA ON % Gas Emission\n",
        "gas_canada = gas_filtered[gas_filtered['Country Name'] == 'Canada'].drop(['Country Name', 'Country Code'], axis=1).values[0][1:61].astype('float')\n",
        "gas_china = gas_filtered[gas_filtered['Country Name'] == 'China'].drop(['Country Name', 'Country Code'], axis=1).values[0][1:61]\n",
        " \n",
        "years = np.arange(1961,2021,1)\n",
        "years_10 = np.arange(2022,2033, 1)\n",
        "\n",
        "# Define an objective function for % gas emission of Canada\n",
        "def objective_CAN(x, a, b, c, d, e):\n",
        "\treturn a*x**3 - b*x**d + x*e\n",
        "\n",
        "# Define an objective function for China\n",
        "def objective_CHN(x,a,b):\n",
        "  return a*x + b\n",
        "\n",
        "# A function for calculating the error between the real and predicted value\n",
        "def get_loss(y, ypred):\n",
        "  return y-ypred\n",
        "\n",
        "# fitting to find the best curve for Canada % Gas Emission\n",
        "def fit_CAN(x, y):\n",
        "  popt, _ = curve_fit(objective_CAN, years, gas_canada)\n",
        "  a, b, c, d, e= popt\n",
        "  y_fitted = objective_CAN(years, a, b, c, d, e)\n",
        "  return y_fitted\n",
        "\n",
        "# fitting to find the best curve for China % Gas Emission\n",
        "def fit_CHN(x, y):\n",
        "  popt, _ = curve_fit(objective_CHN, years, gas_china)\n",
        "  a, b = popt\n",
        "  y_fitted = objective_CHN(years, a, b)\n",
        "  return y_fitted\n",
        "\n",
        "# fitted gas Emission for Canada\n",
        "gas_canada_fitted = fit_CAN(years, gas_canada)\n",
        "# fitted gas emission for China\n",
        "gas_china_fitted = fit_CHN(years, gas_china)\n",
        "\n",
        " \n",
        "def plot_area(\n",
        "        x, \n",
        "        y, \n",
        "        yhat, \n",
        "        title, \n",
        "        xlabel, \n",
        "        ylabel, label1=\"real\", label2=\"fitted\", label3=\"loss\"):\n",
        "  fig,ax = plt.subplots()\n",
        "  ax.set_title(title)\n",
        "  ax.set_xlabel(xlabel)\n",
        "  ax.set_ylabel(ylabel)\n",
        "  ax.fill_between(x,y,0, color='b', label=label1)\n",
        "  ax.fill_between(x, yhat,y, color='g', label=label2)\n",
        "  plt.legend()\n",
        "  plt.show()\n",
        "  \n",
        "# An area plot of the two time series for the last 30 years\n",
        "plot_area(\n",
        "    years[-30:], \n",
        "    gas_canada[-30:], \n",
        "    gas_canada_fitted[-30:], \n",
        "    \"Canada % Gas Emission\", \n",
        "    \"Year\", \n",
        "    \"% Gas Emission\")"
      ],
      "metadata": {
        "id": "ZHeEMRWMIkeY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "outputId": "f7f7a85d-f4de-4ce5-99ce-1603fcfeda30"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/scipy/optimize/minpack.py:808: OptimizeWarning: Covariance of the parameters could not be estimated\n",
            "  category=OptimizeWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ERROR RANGES FOR GERMANY INFANT MORTALITY RATE\n",
        "\n",
        "Our Country of interest is Canada"
      ],
      "metadata": {
        "id": "_fBSYuGtcqZu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_limits(\n",
        "        x, \n",
        "        y, \n",
        "        lower,\n",
        "        upper, \n",
        "        title, \n",
        "        xlabel, \n",
        "        ylabel, label1=\"actual\", label2=\"lower\", label3=\"upper\"):\n",
        "  fig,ax = plt.subplots()\n",
        "  ax.set_title(title)\n",
        "  ax.set_xlabel(xlabel)\n",
        "  ax.set_ylabel(ylabel)\n",
        "  ax.fill_between(x,y,lower,color=\"g\",label=label1)\n",
        "  ax.fill_between(x, lower,0,color=\"r\", label=label2)\n",
        "  ax.fill_between(x, upper,y, color=\"b\", label=label3)\n",
        "  plt.legend()\n",
        "  plt.show()\n",
        "\n",
        "sigma_canada = get_loss(gas_canada[-10:], gas_canada_fitted[-10:]) # losses\n",
        "limit_offset = 0.5\n",
        "\n",
        "# Lower and Upper limits of % Greenhouse Emission\n",
        "def err_ranges(x, func, param, sigma):\n",
        "    \"\"\"\n",
        "    Calculates the upper and lower limits for the function, parameters and\n",
        "    sigmas for single value or array x. Functions values are calculated for \n",
        "    all combinations of +/- sigma and the minimum and maximum is determined.\n",
        "    Can be used for all number of parameters and sigmas >=1.\n",
        "    \n",
        "    This routine can be used in assignment programs.\n",
        "    \"\"\"\n",
        "\n",
        "    import itertools as iter\n",
        "    \n",
        "    # initiate arrays for lower and upper limits\n",
        "    lower = func(x, *param)\n",
        "    upper = lower\n",
        "    \n",
        "    uplow = []   # list to hold upper and lower limits for parameters\n",
        "    for p,s in zip(param, sigma):\n",
        "        pmin = p - s\n",
        "        pmax = p + s\n",
        "        uplow.append((pmin, pmax))\n",
        "        \n",
        "    pmix = list(iter.product(*uplow))\n",
        "    \n",
        "    for p in pmix:\n",
        "        y = func(x, *p)\n",
        "        lower = np.minimum(lower, y)\n",
        "        upper = np.maximum(upper, y)\n",
        "\n",
        "    plot_limits(\n",
        "            years[-10:], \n",
        "            param, \n",
        "            lower, upper, \n",
        "            \"Canada Gas Emission Limits\", \n",
        "            \"Year\", \"Gas Emission\" )    \n",
        "    return lower, upper\n",
        "\n",
        "def func(x, *args):\n",
        "  lower = []\n",
        "  for y in args:\n",
        "    lower.append(y-x)\n",
        "  return lower\n",
        "\n",
        " \n",
        "lower_gas_canada, upper_gas_canada = err_ranges(limit_offset, func, gas_canada[-10:], sigma_canada)"
      ],
      "metadata": {
        "id": "X2y8CBO_x7F2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "3f882af0-2d80-44ad-cd0e-8048e9072a1f"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}